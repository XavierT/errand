#![allow(unused_variables)]

/// Motion directions
pub enum Direction {
    North,
    NorthEast,
    East,
    SouthEast,
    South,
    SouthWest,
    West,
    NorthWest,
}

/// Commands
///
/// They can be generated by a user input, or as the consequences of
/// some other actions.
pub enum Command {
    // List of generic game actions
    /// Quit game
    Quit,
    /// Save game and quit
    Save,

    // Toggle modes
    // TBD
    //
    // List of Normal mode player action
    /// Move towards Directions
    MoveTowards(Direction),
    /// Go to (x,y,z) coordinates
    MoveTo { x: i64, y: i64, z: i64 },

    // List of Explore mode player action
    /// Move Cursor towards Directions
    MoveCursorTowards(Direction),
    /// Move cursor to (x,y,z) coordinates
    CurstorTo { x: i64, y: i64, z: i64 },
}



/// Mode of input similar to Vim input mode.
///
/// In each mode the key will have a different meaning
#[derive(Debug)]
pub enum InputMode {
    /// Normal game mode
    Normal,
    /// Move cursor freely around to identify things
    Explore,
    /// Menu
    Menu,
    /// Yes or no question
    YesOrNo,
    /// Help files
    Help,
}

pub struct InputHandler {
    mode: InputMode,
}

impl InputHandler {
    pub fn new() -> InputHandler {
        InputHandler { mode: InputMode::Normal }
    }

    pub fn change_mode(&mut self, new_mode: InputMode) {
        self.mode = new_mode;
    }

    pub fn process_key(&self, key: char) {
        match self.mode {
            InputMode::Normal => self.process_normal(key),
            InputMode::Explore => self.process_explore(key),
            InputMode::Menu => self.process_menu(key),
            InputMode::YesOrNo => self.process_yesorno(key),
            InputMode::Help => self.process_help(key),
        }
    }

    fn process_normal(&self, key: char) {
        match key {
            'h' => info!("west"),
            'j' => info!("south"),
            'k' => info!("north"),
            'l' => info!("left"),
            'y' => info!("left"),
            'u' => info!("left"),
            'b' => info!("left"),
            'n' => info!("left"),
            _ => warn!("unknown command in {:?} mode : {}", self.mode, key),
        }
    }

    fn process_explore(&self, key: char) {
        unimplemented!();
    }

    fn process_menu(&self, key: char) {
        unimplemented!();
    }

    fn process_yesorno(&self, key: char) {
        unimplemented!();
    }

    fn process_help(&self, key: char) {
        unimplemented!();
    }
}
